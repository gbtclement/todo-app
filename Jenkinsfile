pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "todo-app"
        GITHUB_REPO = "votre-username/votre-repo" // √Ä modifier avec vos informations
        DOCKER_REGISTRY = "ghcr.io" // GitHub Container Registry
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'T√©l√©chargement du repository...'
                checkout scm
            }
        }
        
        stage('Verify Environment') {
            steps {
                echo 'V√©rification de l\'environnement...'
                sh 'php --version'
                sh 'composer --version'
                sh 'docker --version'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installation des d√©pendances...'
                sh '''
                    rm -f composer.lock
                    rm -rf vendor/
                    composer install
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Ex√©cution des tests...'
                sh '''
                    mkdir -p tests/results
                    vendor/bin/phpunit --log-junit tests/results/junit.xml --testdox || echo "Tests termin√©s"
                '''
            }
            post {
                always {
                    script {
                        if (fileExists('tests/results/junit.xml')) {
                            junit 'tests/results/junit.xml'
                            echo "‚úÖ Tests publi√©s dans Jenkins - Consultez l'onglet 'Test Results'"
                        } else {
                            echo "‚ùå Fichier de r√©sultats introuvable"
                        }
                    }
                }
            }
        }
        
        stage('Create Package') {
            steps {
                echo 'Cr√©ation du package de l\'application...'
                sh '''
                    # R√©installer sans les d√©pendances de dev
                    composer install --no-dev --optimize-autoloader
                    
                    # Cr√©er le package en excluant plus de fichiers temporaires
                    tar -czf todo-app-${BUILD_NUMBER}.tar.gz \
                        --exclude=tests \
                        --exclude=.git \
                        --exclude=composer.lock \
                        --exclude=todo-app-*.tar.gz \
                        --exclude='*.log' \
                        --exclude='.jenkins' \
                        . || echo "Archive cr√©√©e avec warnings"
                '''
                archiveArtifacts artifacts: 'todo-app-*.tar.gz'
                echo "‚úÖ Package cr√©√© : todo-app-${BUILD_NUMBER}.tar.gz"
            }
        }
        
        stage('Tag Repository') {
            steps {
                echo 'Tagging du repository avec la version du build...'
                script {
                    def tagName = "v${BUILD_NUMBER}"
                    
                    // V√©rifier si le tag existe d√©j√†
                    def tagExists = sh(
                        script: "git tag -l ${tagName}",
                        returnStdout: true
                    ).trim()
                    
                    if (!tagExists) {
                        sh """
                            git config user.email "clementgaubert44@gmail.com"
                            git config user.name "gbtclement"
                            git tag -a ${tagName} -m "Release version ${BUILD_NUMBER} - Build by Jenkins"
                            echo "Tag ${tagName} cr√©√© localement"
                        """
                        
                        // Push du tag vers le repository (n√©cessite des credentials configur√©s)
                        withCredentials([gitUsernamePassword(credentialsId: 'github-credentials', gitToolName: 'Default')]) {
                            sh "git push origin ${tagName}"
                            echo "‚úÖ Tag ${tagName} pouss√© vers le repository"
                        }
                    } else {
                        echo "Tag ${tagName} existe d√©j√†, saut de cette √©tape"
                    }
                }
            }
        }
        
        stage('Archive Package') {
            steps {
                echo 'Archive du package dans Jenkins...'
                script {
                    echo "‚úÖ Package todo-app-${BUILD_NUMBER}.tar.gz archiv√© dans Jenkins"
                    echo "üì¶ Vous pouvez t√©l√©charger le package depuis l'interface Jenkins"
                }
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ Build ${BUILD_NUMBER} termin√© avec succ√®s!"
            echo "üì¶ Package disponible : todo-app-${BUILD_NUMBER}.tar.gz"
            echo "üè∑Ô∏è  Tag repository : v${BUILD_NUMBER}"
        }
        failure {
            echo "‚ùå Build ${BUILD_NUMBER} a √©chou√©!"
        }
        always {
            echo "üßπ Nettoyage termin√©"
        }
    }
}